spring.application.name=IoTDataService

# Define uma porta diferente para este serviço
server.port=8081

# Configuração do Banco de Dados PostgreSQL
# Usaremos um banco de dados separado para este microsserviço
spring.datasource.url=jdbc:postgresql://localhost:5432/farmalytics_iot_db
spring.datasource.username=seu_usuario
spring.datasource.password=sua_senha

# Configuração do Hibernate
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

# --- Configuração do Apache Kafka ---
# Endereço do Kafka Broker (servidor)
spring.kafka.bootstrap-servers=localhost:9092

# Define como as chaves e os valores das mensagens serão serializados (convertidos para bytes)
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer

# --- Configuração do Consumidor Kafka ---
# Identifica o grupo de consumidores. Todas as instâncias com o mesmo group-id
# compartilharão a carga de um tópico.
spring.kafka.consumer.group-id=iot-data-consumers
# Define como as chaves e os valores das mensagens serão desserializados (convertidos de bytes para objetos)
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer

# Diz ao desserializador de JSON para confiar em todos os pacotes, o que é mais simples para o desenvolvimento.
spring.kafka.consumer.properties.spring.json.trusted.packages=*

# --- Configuração do Cliente Eureka ---
# A URL padrão do nosso servidor Eureka
eureka.client.service-url.defaultZone=http://localhost:8761/eureka/